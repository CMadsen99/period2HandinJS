import { Router } from "express"
import { ApiError } from "../errors/errors"
import facade from "../facades/DummyDB-Facade"
import { IFriend } from "../interfaces/IFriend"
import authMiddleware from "../middleware/basic-auth"

const router = Router();

router.use(authMiddleware);
 
router.get("/all", async (req: any, res) => {
  const friends = await facade.getAllFriends();
  const friendsDTO = friends.map(friend=>{
    const {firstName, lastName} = friend
    return {firstName,lastName} 
  });
  res.json(friendsDTO);
})

router.get("/findby-email/:userMail", async (req, res, next) => {
    const userMail = req.params.userMail;
    try {
        const friend = await facade.getFriend(userMail);
        if (friend == null) {
            throw new ApiError("User not found", 404);
        } 
        const { firstName, lastName, email } = friend;
        const friendDTO = { firstName, lastName, email }
        res.json(friendDTO);
    } catch (err) {
        next(err);
    }
  })

  router.get("/me", async (req: any, res, next) => {
    const userMail = req.credentials.userName;
    try {
        const friend = await facade.getFriend(userMail);
        if (friend == null) {
            throw new ApiError("User not found", 404);
        } 
        const { firstName, lastName, email } = friend;
        const friendDTO = { firstName, lastName, email }
        res.json(friendDTO);
    } catch (err) {
        next(err);
    }
  })

  router.post("/add", async (req: any, res, next) => {
      try {
        const friend : IFriend = {
            id : req.body.id,
            firstName : req.body.firstName,
            lastName : req.body.lastName,
            email : req.body.email,
            password : req.body.password
        };
    
        const newFriend = await facade.addFriend(friend);
        if (newFriend == null) {
            throw new ApiError("User not added", 400);;
        }
        const { firstName, lastName, email } = newFriend;
        const friendDTO = { firstName, lastName, email }
        res.json(friendDTO);
    } catch (err) {
        next(err);
    }
  });

  router.delete("/delete/:useremail", async(req, res, next) => {
      try {
        const userEmail = req.params.useremail;
        const friend = await facade.deleteFriend(userEmail);
        if (friend == null) {
            throw new ApiError("User not found", 404);
        }
        const { firstName, lastName, email } = friend;
        const friendDTO = { firstName, lastName, email }
        res.json(friendDTO);
    } catch (err) {
        next(err);
    }
  });
   
 
export default router